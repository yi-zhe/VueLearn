关于不同版本的Vue

1. vue.js与vue.runtime.js的区别
    vue.js是完整版的Vue 包含 核心功能 + 模板解析器
    vue.runtime.xxx.js 是运行时版本的Vue 只包含核心功能而没有模板解析器

2. vue.runtime.xxx.js没有模板解析器 所以不能使用template配置项
   需要使用render函数接收收到的createElement函数去指定具体的内容


修改默认配置

vue.config.js 配置文件
使用vue inspect > output.js 可以查看到vue脚手架的默认配置
使用vue.config.js 可以对脚手架进行个性化定制 https:/cli.vuejs.org/zh

## ref属性
  1. 被用来给元素或子组件注册引用信息(id的替代者)
  2. 应用在html标签上获取的是真实DOM元素, 应用在组件标签上是组件实例对象的代理对象
  3. 使用方式:
      打标识: <h1 ref="xxx">...</h1> <School ref="xxx">...</School>
      获取:   this.$refs.xxx

## 配置项props
  功能: 让组件接收外部传过来的数据
  1. 传递数据:
      <Demo name="xxx" />
  2. 接收数据
      第一种: props: ['name']
      第二种: props: {name: Number}
      第三种: props: {name : {type: String, required: false, default: '老王'}}
备注: props是只读的, Vue底层会监测对props的修改, 如果进行了修改, 会发出警告
      若业务确实需要修改, 那么复制props的内容到data中一份, 然后修改data中的数据

## mixin(混入)
  功能: 可以把多个组件共用的配置提取成一个混入对象
  使用方式:
    1. 定义mixin
        {
            data() {},
            methods:{},
            ...
        }
    2. 使用
        1. 全局: Vue.mixin(xxx)
        2. 局部: mixins: ['xxx', 'yyy']

## 插件
  功能: 用于增强Vue
  本质: 包含install方法的一个对象, install的第一个参数是Vue, 第二个以后的参数是插件使用者传递的数据
  定义: 
  duixiang.install = function (Vue, options) {
    Vue.filter()
    Vue.directive()
    Vue.mixin()
    Vue.prototype.$myMethod = function() {}
    Vue.prototype.$myProperty = xxx
  }
  使用:
  Vue.use()


## scoped样式
  作用: 让样式只在局部生效 防止冲突
  写法: <style scpoed></style>



